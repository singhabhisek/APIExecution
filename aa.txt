var selectedApp = '';
var targetJson = '';



// Function to show confirmation box
function showConfirmation(message, type) {
    // Retrieving elements from the confirmation box
    var confirmBox = $('#confirm-box');
    var confirmHeader = confirmBox.find('#confirm-header-text');
    var header = $('.confirm-header'); // Select the header element
    var confirmMessage = confirmBox.find('.confirm-message');
    var okButton = confirmBox.find('#ok-button');

    confirmMessage.text(message);
    confirmBox.removeClass('hidden');

    if (type === 'success') {
        header.removeClass('bg-danger').addClass('bg-success');
        confirmHeader.removeClass('bg-danger').addClass('bg-success');
        confirmHeader.text('Success');
    } else if (type === 'error') {
        header.removeClass('bg-success').addClass('bg-danger');
        confirmHeader.removeClass('bg-success').addClass('bg-danger');
        confirmHeader.text('Error');
    }

    // Hide confirmation box when OK button is clicked
    okButton.click(function() {
        hideConfirmation();
    });

    // Event listener for Enter key press
    $(document).on('keydown', function(event) {
        if (event.key === "Enter" ) { //&& !confirmBox.hasClass('hidden')
            okButton.click(); // Trigger OK button click
        }
        if (event.key === "Escape" ) { //&& !confirmBox.hasClass('hidden')
            okButton.click(); // Trigger OK button click
        }
    });

    // Event handler for hiding confirmation box when clicked outside the box
    confirmBox.click(function() {
        hideConfirmation();
    });
}

// Function to hide confirmation box
function hideConfirmation() {
    var confirmBox = $('#confirm-box');
    var okButton = confirmBox.find('#ok-button');

    // Hiding the confirmation box
    confirmBox.addClass('hidden');

    // Remove click event from OK button
    okButton.off('click');
}

// Document ready event handler
$(document).ready(function() {
    // Initially disable the button
    $('#export-btn').prop('disabled', true);


    // Function to check if any API has been executed and any checkbox is selected
    function checkAPIsExecuted() {
        var isExecutable = false;
        var isAnyChecked = false;

        // Loop through each row of the table to check if the Info column (6th column) contains data
        $('#service-table tbody tr').each(function() {
            var infoColumn = $(this).find('td:nth-child(6)').text().trim(); // Adjust column index based on "Info"
            var checkbox = $(this).find('input[type="checkbox"]'); // Find the checkbox in the current row

            // If any Info column has data and the corresponding checkbox is checked, enable the export button
            if (checkbox.prop('checked') && infoColumn !== "") {
                isExecutable = true;
                return false; // Exit the loop early if both conditions are met
            }

            // Check if any checkbox is selected
            if (checkbox.prop('checked')) {
                isAnyChecked = true;
            }
        });

        // Enable the button if both conditions are true: Info is available AND a checkbox is selected
        $('#export-btn').prop('disabled', !(isExecutable && isAnyChecked));
    }



    var table = $('#service-table').DataTable({
//        drawCallback: function(settings) {
//            // Hide the last two columns on each page draw
//            $(this.api().table().container())
//                .find('tbody tr')
//                .find('td:nth-last-child(-n+2)')
//                .hide();
//        },
        autoWidth: true,
        order: [], // Disable initial sorting
        columnDefs: [
            { targets: [0, 3, 4, 6], orderable: false } // Disable sorting for the first column (Select All checkbox)
        ],
        select: true
    });

    // Event handler for "Select All" checkbox
    $('#select-all').change(function() {
        var isChecked = $(this).prop('checked');
        $('#service-table').DataTable().rows().every(function() {
            var rowNode = this.node();
            var checkbox = $(rowNode).find('input[name="service"]');
            checkbox.prop('checked', isChecked);
        });
    });

    // Event handler for individual checkboxes
    $(document).on('change', 'input[name="service"]', function() {

        // Update "Select All" checkbox state based on individual checkboxes
        var currentPageCheckedCount = 0;
        $('#service-table').DataTable().rows().every(function() {
            var rowNode = this.node();
            var checkbox = $(rowNode).find('input[name="service"]');
            if (checkbox.prop('checked')) {
                currentPageCheckedCount++;
            }
        });
//        console.log('Total checked checkboxes in the table:', currentPageCheckedCount);

        var totalCheckboxCount = $('#service-table').DataTable().rows().count();
//        console.log('Total checkboxes in the table:', totalCheckboxCount);

        var allChecked = currentPageCheckedCount === totalCheckboxCount;
        $('#select-all').prop('checked', allChecked);
    });


    // Listen for checkbox selection changes
    $('#service-table tbody').on('change', 'input[type="checkbox"]', function() {
        checkAPIsExecuted();
    });

    // Event handler for application select change
    $('#app-dropdown').change(function() {
        table.clear().draw();
        $('#select-all').prop('checked', false);
        selectedApp = $(this).find('option:selected').text();
        $('#passed-count-value').text('');
        $('#failed-at-least-once-count-value').text('');
        $('#failed-all-count-value').text('');
        // Load JSON data based on the selected application
        $.getJSON('/static/config/app_config.json', function(data) {
            targetJson = '';
            data.applications.forEach(function(app) {
                if (app.name === selectedApp) {
                    targetJson = app.file;
                    return false;
                }
            });
            // Populate table with service data from JSON
            $.getJSON(targetJson, function(serviceData) {
                $.each(serviceData.entries, function(index, entry) {
                    var overallStatus = entry.overall_status;
                    var passedCount = entry.passed_count;
                    var totalCount = entry.total_iterations;
                    var iterationStatusText = passedCount + ' / ' + totalCount;
                    table.row.add([
                        '<input type="checkbox" name="service" value="' + entry.serviceName + ':' + entry.operationName + '">',
                        entry.serviceName,
                        entry.operationName,
                        '',
                        '',
                        entry.useCase,
                        '<button type="button" style="display:none" class="btn btn-primary show-results-btn">Results</button>',
                        '',
                        ''
                    ]);
                });
                table.draw();
            }).fail(function(jqXHR, textStatus, errorThrown) {
                console.error('Error fetching JSON file:', textStatus, errorThrown);
            });
        });
    });

var counts = {
            passed: 0,
            failedAtLeastOnce: 0,
            failedAll: 0
        };


    // Submit button Logic
    $('#submit-btn').click(function() {
        clearTableAndAccordion();


        // Get selected services and execute them
        var selectedServices = getSelectedServices();
        if (selectedServices.length === 0) {
              showConfirmation('Please select at least one service to execute.', 'error');
              showErrorModal('error','Please select at least one service to execute.');
            return;
        }

        // Blur the button to lose focus and prevent multiple executions on pressing Enter
        $(this).blur();

        // Disable the submit button immediately to prevent duplicate clicks
        disableSubmitButton();

        counts = {
            passed: 0,
            failedAtLeastOnce: 0,
            failedAll: 0
        };
        executeServices(selectedServices);
        // Initially disable the button
        $('#export-btn').prop('disabled', false);

    });


    // Function to disable the submit button
    function disableSubmitButton() {
        $('#submit-button').prop('disabled', true); // Disable the submit button
    }

    // Function to enable the submit button
    function enableSubmitButton() {
        $('#submit-button').prop('disabled', false); // Enable the submit button
    }


    //reset button logic
        $('#reset-btn').click(function() {
            resetDataTables();
            $('#iteration-count').val(1);
            enableSubmitButton();
            $('#export-btn').prop('disabled', true);
        });

    function resetDataTables(){
        $('input[name="service"]').prop('checked', false); // Uncheck all checkboxes
            // Reset select all checkbox
            document.getElementById("select-all").checked = false;
            $('.status-icon').attr('src', '').removeAttr('title'); // Clear status icons and tooltips
            $('#service-table').DataTable().rows().every(function() {
                var rowNode = this.node();
                $(rowNode).find('td:nth-child(4)').empty(); // Clear Status column content
                $(rowNode).find('td:nth-child(5)').empty(); // Clear Status Description column content
                $(rowNode).find('td:nth-child(7)').empty(); // Clear Info column content
                $(rowNode).find('td:nth-child(8)').empty(); // Clear Results column content
                var checkbox = $(rowNode).find('input[type="checkbox"]');
                checkbox.prop('checked', false);
            });
      }


    // Function to disable the submit button
    function disableSubmitButton() {
        $('#submit-button').prop('disabled', true); // Disable the submit button
    }

    // Function to enable the submit button
    function enableSubmitButton() {
        $('#submit-button').prop('disabled', false); // Enable the submit button
    }

    // Clear table body and accordion contents
    function clearTableAndAccordion() {
        $('.accordion').empty();
        $('.accordion').remove();
        $('.modal').remove();
//        $('.status-icon').attr('src', '').removeAttr('title');
//        $('.status-icon').next('span').remove();
//        $('td:nth-child(7)').empty();
//        $('td:nth-child(8)').empty();
//        $('td:nth-child(4)').empty();
//        $('td:nth-child(5)').empty();
        $('#passed-count-value, #failed-at-least-once-count-value, #failed-all-count-value').text('');

        $('#service-table').DataTable().rows().every(function() {
                var rowNode = this.node();
                $(rowNode).find('td:nth-child(4)').empty(); // Clear Status column content
                $(rowNode).find('td:nth-child(5)').empty(); // Clear Status Description column content
                $(rowNode).find('td:nth-child(7)').empty(); // Clear Info column content
                $(rowNode).find('td:nth-child(8)').empty(); // Clear Results column content

            });

    }

    // Get selected services from the DataTable
    function getSelectedServices() {
        var selectedServices = [];// Array to hold selected services
        $('#service-table').DataTable().rows().every(function() {
            var rowData = this.data(); // Get data for each row
            var checkbox = $(this.node()).find('input[type="checkbox"]'); // Get checkbox for the row
            if (checkbox.prop('checked')) {
                selectedServices.push(rowData[1] + ':' + rowData[2]); // Add selected service to the array
            }
        });
        return selectedServices; // Return array of selected services
    }

    // Function to fetch user information
    async function fetchUserInfo() {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: '/user_info',
                method: 'GET',
                success: function(response) {
                    resolve(response); // Resolve promise with user info
                },
                error: function(xhr) {
                    reject(xhr.responseJSON.message); // Reject promise on error
                }
            });
        });
    }
    // Execute selected services
    async function executeServices(selectedServices) {
        $('#loader-overlay').show();

        // Fetch user information (userId and accessLevel)
        const userInfo = await fetchUserInfo();
        const userId = userInfo.userId; // Extract userId
        const accessLevel = userInfo.accessLevel; // Extract access level

        // Define maximum operations based on access level
        const maxOperations = accessLevel === 'admin' ? Infinity : 5;

        // Check if the number of selected services exceeds the maximum allowed operations
        if (selectedServices.length > maxOperations) {
            alert(`You can only execute a maximum of ${maxOperations} operations.`);
            $('#loader-overlay').hide(); // Hide loader before returning
            return; // Stop execution if the limit is exceeded
        }
        var iterationCount = $('#iteration-count').val();
        var requestData = {
            services: selectedServices,
            targetJson: targetJson,
            iterationCount: iterationCount
        };

        // Split services into batches
        var serviceBatches = [];

        //Batch Count Declaration
        var batchCount = 5;

        // Divide services into batches
        while (requestData.services.length > 0) {
            serviceBatches.push(requestData.services.splice(0, batchCount));
        }

        try {
              // Execute each batch of services sequentially
              for (let i = 0; i < serviceBatches.length; i++) {
                    console.log('Executing Batch ' + (i + 1) + ' of ' + serviceBatches.length + ':', serviceBatches[i].join(', '));
                    await Promise.all(serviceBatches[i].map(service => executeService(service, requestData)));

                    // Check if this is the last batch
                    if (i === serviceBatches.length - 1) {
                        // Hide loader and show confirmation message after the last batch
                        $('#loader-overlay').hide();
                        showConfirmation('Execution Completed', 'success');
                    }
                }
        } catch (error) {
            // Handle execution error
            handleExecutionError(null, null, error);

        } finally {
            $('#loader-overlay').hide();
        }
    }



    // Function to execute a single service
    function executeService(service, requestData) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: '/execute', // API endpoint
                type: 'POST', // HTTP method
                contentType: 'application/json', // Content type
                data: JSON.stringify({
                    ...requestData, // Include existing request data
                    services: [service] // Execute one service at a time
                }),
                success: function(response) {

                    console.log(response);
                    // Assuming successful response means status is 'success'
                    if (response.status === 'success') {
                        // Handle the 'responses' field which may contain XML or JSON
                        const serviceResponses = response.responses[service]['responses'];

                        serviceResponses.forEach(singleResponse => {
                            let formattedResponse;

                            // Check if the response is XML or JSON
                            if (isXml(singleResponse.response)) {
                                // Parse the XML string and format it for display
                                formattedResponse = formatXml(singleResponse.response);
                                console.log('Formatted XML response:', formattedResponse);

                                // Add to DataTable as formatted XML
                                addToDataTable(service, 'XML', formattedResponse);
                            } else {
                                // It's JSON, format it for display
                                formattedResponse = JSON.stringify(JSON.parse(singleResponse.response), null, 4);
                                console.log('Formatted JSON response:', formattedResponse);

                                // Add to DataTable as formatted JSON
                                addToDataTable(service, 'JSON', formattedResponse);
                            }
                        });

                        // After handling each response, resolve the promise
                        handleExecutionSuccess(response); // Handle successful response
                        resolve(); // Resolve promise
                    } else {
                        console.log(response);
                        // Handle unexpected success response with error status
                        resolve(); // Resolve the promise even if there's an error to continue with other operations
                    }
                },
                error: function(xhr, status, error) {
                    // Extract error message from the response if available
                    let errorMessage = '';
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    } else {
                        errorMessage = error || 'Unknown error occurred';
                    }

                    // Extract serviceName and operationName from the error message
                    serviceName = errorMessage.split(' => ')[0].split(' - ')[0];
                    operationName = errorMessage.split(' => ')[0].split(' - ')[1]
                    errorDetail = errorMessage.split(' => ')[1]

                    // Pass serviceName, operationName, and errorDetail to displayErrorInDataTable
                    displayErrorInDataTable(serviceName.trim(), operationName.trim(), errorDetail.trim());

                    // Resolve the promise even if there's an error to continue with other operations
                    resolve();
                }
            });
        });
    }

 // Utility function to check if a string is XML
function isXml(str) {
    try {
        $.parseXML(str);
        return true;
    } catch (e) {
        return false;
    }
}

// Function to add the formatted response to the DataTable
function addToDataTable(service, type, formattedResponse) {
    // Assuming you have a DataTable initialized with an id 'dataTable'
    $('#dataTable').DataTable().row.add([
        service, // Service Name
        type,    // Response type (XML/JSON)
        `<pre>${escapeHtml(formattedResponse)}</pre>` // Formatted response
    ]).draw();
}

// Utility function to escape HTML special characters for safe display
function escapeHtml(text) {
    return text.replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;")
               .replace(/"/g, "&quot;")
               .replace(/'/g, "&#039;");
}


    // Function to display the error message in the status description cell of the datatable
    function displayErrorInDataTable(serviceName, operationName, errorMessage) {

        var dataTable = $('#service-table').DataTable();

        // Find the row in the datatable corresponding to the service name and operation name
        var rowIndex = -1;
        dataTable.rows().every(function (index) {
            var rowData = this.data();
    //        console.log(rowData[1] + rowData[2])
            if (rowData && rowData[1] === serviceName && rowData[2] === operationName) {
                rowIndex = index; // Store the found row index
                return false; // Exit loop once row is found
            }
            return true; // Continue iterating over rows
        });

        // Check if the row was found
        if (rowIndex !== -1) {
            // Update the status description cell with the error message

            var statusDescriptionColumnIndex = 4; // Assuming the status description is in the fourth column
            //make the font as red for error
            dataTable.cell(rowIndex, statusDescriptionColumnIndex).data(`<span style="color: red">${errorMessage}</span>`).draw();

        } else {
            console.error('Row not found in the datatable:', serviceName, operationName);
        }
    }

    // Handle successful execution response
    function handleExecutionSuccess(response) {
        var counts = calculateCounts(response.responses);
        // Update table rows with response details
        updateTableRows(response.responses);
        // Update counts display
        updateCountsDisplay(counts);
        // Update "Show Results" buttons
        updateShowResultsButtons(response);
//        hideLoaderAndShowConfirmation(response);
    }

    // Calculate and return counts based on the response
    function calculateCounts(serviceResponses) {


        // Iterate through service responses to calculate counts
        $.each(serviceResponses, function(serviceName, serviceData) {
            console.log("Service:", serviceName, "Overall Status:", serviceData.overall_status);

            if (serviceData.overall_status === 'GREEN') {
                counts.passed++; // Increment passed count
            } else if (serviceData.overall_status === 'RED') {
                counts.failedAll++; // Increment failed all count
            } else if (serviceData.overall_status === 'AMBER') {
                counts.failedAtLeastOnce++; // Increment failed at least once count
            }
        });
        console.log("counts:", counts);
        return counts; // Return counts
    }

    // Update table rows with response details
    function updateTableRows(serviceResponses) {
        $.each(serviceResponses, function(serviceName, serviceData) {
            var serviceNameParts = serviceName.split(':'); // Split service name into parts

            // Validate service name format
            if (serviceNameParts.length !== 2) {
                console.error('Invalid service name format:', serviceName);
                return; // Exit if format is invalid
            }

            updateTableRow(serviceNameParts, serviceData); // Update row for this service
        });
    }

    // Update individual table row with service data
    function updateTableRow(serviceNameParts, serviceData) {
        // Iterate over each row in the DataTable
        $('#service-table').DataTable().rows().every(function() {
            var rowData = this.data();

            // Match rows based on service name and operation name
            if (rowData[1] === serviceNameParts[0] && rowData[2] === serviceNameParts[1]) {
                var rowNode = this.node();

                // Update row information with new service data
                updateStatusAndCounts(rowNode, serviceData);
                updateRequestExecuted(rowNode, serviceData);
                updateStatusDescription(rowNode, serviceData);
                updateResultCell(rowNode, serviceData);

                // Create modal content for "Show Results" button
                createModalContent(serviceNameParts[0], serviceNameParts[1], serviceData);
            }
        });
    }

    // Update status and counts columns in the table row
    function updateStatusAndCounts(rowNode, serviceData) {
        var overallStatusCell = $(rowNode).find('td:nth-child(4)');
        var statusDescriptionCell = $(rowNode).find('td:nth-child(5)');

        // Update the overall status image and text (passed/total iterations)
        var statusColor = getStatusColor(serviceData.overall_status);
        overallStatusCell.html('<img src="' + statusColor + '" alt="' + serviceData.overall_status + '">');
        overallStatusCell.append($('<span>').text(' ' + serviceData.passed_count + ' of ' + serviceData.total_iterations));

        // Update status description cell with individual iteration statuses
        statusDescriptionCell.empty();
        $.each(serviceData.status_descriptions, function(index, description) {
            statusDescriptionCell.append('<div>Iteration ' + (index + 1) + ': ' + description + '</div>');
        });
    }

    // Get status color based on overall status
    function getStatusColor(overallStatus) {
        var statusColor = '';
        // Map overall status to corresponding image color
        if (overallStatus === "GREEN") {
            statusColor = "/static/images/green.png";
        } else if (overallStatus === "AMBER") {
            statusColor = "/static/images/amber.png";
        } else if (overallStatus === "RED") {
            statusColor = "/static/images/red.png";
        }

        return statusColor;
    }

    // Update the request executed information in the table row
    function updateRequestExecuted(rowNode, serviceData) {
        var requestExecutedCell = $(rowNode).find('td:nth-child(9)');
        var rawRequests = '';

        // Iterate through the raw requests and format them for display
        serviceData.raw_requests.forEach(function(request) {
            rawRequests += request.method + ' ' + request.url + ' | ';
            rawRequests += 'Headers: ' + JSON.stringify(request.headers) + ' | ';

            // Append request body if the request is POST
            if (request.method === 'POST' && request.data) {
                if (request.headers['Content-Type'] === 'application/xml') {
                    rawRequests += 'Request Body (XML): ' + request.data + ' | ';
                } else if (request.headers['Content-Type'] === 'application/json') {
                    rawRequests += 'Request Body (JSON): ' + JSON.stringify(request.data) + ' | ';
                }
            }
        });

        // Remove the last trailing separator (|)
        rawRequests = rawRequests.slice(0, -3);

        // Set the raw request information to the cell and hide it by default
        requestExecutedCell.html(rawRequests);
      //  requestExecutedCell.hide();
    }

    // Update status description
    // Update status description with new lines between iterations
    // Update status description with formatted newlines between iterations
    function updateStatusDescription(rowNode, serviceData) {
        var statusDescriptionCell = $(rowNode).find('td:nth-child(5)');
        statusDescriptionCell.empty();

        // Create a string with newline characters between iterations
        var statusDescriptionText = '';
        $.each(serviceData.status_descriptions, function(index, description) {
            if (index > 0) {
                statusDescriptionText += '\n'; // Add a new line between iterations
            }
            statusDescriptionText += 'Iteration ' + (index + 1) + ': ' + description;
        });

        // Add the formatted text into the cell with white-space handling
        statusDescriptionCell.append('<div style="white-space: pre-wrap;">' + statusDescriptionText + '</div>');
    }

    // Event handler for iteration count input validation
    $('#iteration-count').on('input', function() {
        var maxIterations = 3;
        var inputValue = parseInt($(this).val());

        // Restrict input to maximum iteration count
        if (inputValue > maxIterations) {
            $(this).val(maxIterations);
        }

        var minIterations = 1;
        inputValue = parseInt($(this).val());

        // Set the minimum iteration count and handle invalid input
        if (isNaN(inputValue) || inputValue < minIterations) {
            $(this).val(minIterations);
        }
    });

    // Helper function to round numbers to two decimal places

    function roundToTwoDecimalPlaces(number) {
            return typeof number === 'undefined' ? 0 : parseFloat(number.toFixed(2));
        }

    // Update the result cell with response details for each iteration
    function updateResultCell(rowNode, serviceData) {
        var resultCell = $(rowNode).find('td:nth-child(8)');
        var responseDetails = '';

        // Iterate over each response and format details for display
        $.each(serviceData.responses, function(index, iterationResponse) {
            var iterationNumber = index + 1;
            var iterationStatus = iterationResponse.status === 'PASS' ? 'PASS' : 'FAIL';
            var sanitizedResponse = iterationResponse.response.replace(/\n/g, ' ').replace(/\\n/g, ' ');

            // Append iteration details including status, response time, and response content
            responseDetails += 'Iteration ' + iterationNumber + ' - ' + iterationStatus + ': Time: ' + roundToTwoDecimalPlaces(iterationResponse.response_time) + ' sec ' + sanitizedResponse + '\n';
        });

        // Remove the last trailing newline character
        responseDetails = responseDetails.slice(0, -3);

        // Update the result cell with the formatted response details
        resultCell.html(responseDetails);
    }

    // Update "Show Results" button and associated modal for each service
    function updateShowResultsButtons(response) {
        var table = $('#service-table').DataTable();

        // Iterate through each row and update the "Info" column
        table.rows().every(function() {
            var rowData = this.data();
            var serviceName = rowData[1];
            var operationName = rowData[2];
//            var column8Value = rowData[7];
            var rowNode = this.node();

            var infoCell = $(rowNode).find('td:nth-child(7)');
            // Retrieve the value from the 8th column using jQuery
            var column8Value = $(rowNode).find('td:nth-child(8)').text().trim(); // Use .text() to get the cell value

            // If response data exists for this service, create and append "Show Results" button
            if (response.responses && response.responses.hasOwnProperty(serviceName + ':' + operationName)) {
                var showResultsBtn = $('<button type="button" class="btn btn-info show-results-btn" data-toggle="modal" data-target="#modal-' + serviceName + '">Results</button>');
                showResultsBtn.click(function() {

                     alert('Custom Message: The value from column 8 is: ' + column8Value);
                     // Show the modal for the respective service and operation
                    var modalId = '#modal-' + serviceName + '-' + operationName;
                    $(modalId).modal('show');
                });

                // Append the button to the "Info" column and create modal content
                infoCell.append(showResultsBtn);
                createModalContent(serviceName, operationName, response.responses[serviceName + ':' + operationName]);
            }
        });
    }

    // Create modal content for "Show Results" button for each service iteration
    function createModalContent(actualServiceName, actualOperationName, serviceData) {
        var accordionContainer = $('<div class="accordion" id="accordion-' + actualServiceName + '">');

        // Iterate through each response and create an accordion item for each iteration
        $.each(serviceData.responses, function(index, iterationResponse) {
            var iterationNumber = index + 1;
            var iterationStatus = iterationResponse.status === 'PASS' ? 'PASS' : 'FAIL';
            var responseTime = roundToTwoDecimalPlaces(iterationResponse.response_time);

            // Determine if the response is JSON or XML, and format it accordingly
            let isJSON = true;
            let formattedResponse = '';
            try {
                const jsonResponse = JSON.parse(iterationResponse.response);
                formattedResponse = JSON.stringify(jsonResponse, null, 4); // Pretty print JSON
            } catch (e) {
                isJSON = false;
                formattedResponse = iterationResponse.response; // Handle as XML or plain text
            }

            // Wrap the response in <pre> for proper formatting based on type
            formattedResponse = '<pre><code class="language-' + (isJSON ? 'json' : 'xml') + '">' + escapeHtml(formattedResponse) + '</code></pre>';

            // Create accordion item for each iteration's response
            accordionContainer.append(
                '<div class="card">' +
                '<div class="card-header">' +
                '<h2 class="mb-0">' +
                '<button class="btn btn-link" type="button" data-toggle="collapse" ' +
                'data-target="#collapse-' + actualServiceName + '-' + iterationNumber + '">' +
                'Iteration ' + iterationNumber + ' - ' + iterationStatus +
                '</button>' +
                '</h2>' +
                '</div>' +
                '<div id="collapse-' + actualServiceName + '-' + iterationNumber + '" class="collapse" ' +
                'aria-labelledby="heading-' + actualServiceName + '-' + iterationNumber + '" ' +
                'data-parent="#accordion-' + actualServiceName + '">' +
                '<div class="card-body">' +
                'Response Time: ' + responseTime + ' sec<br>' +
                formattedResponse +
                '</div>' +
                '</div>' +
                '</div>'
            );
        });

        // Create modal for the service containing the accordion
        var modalContent = $('<div class="modal fade" id="modal-' + actualServiceName + '-' + actualOperationName + '">').append(
            $('<div class="modal-dialog modal-dialog-scrollable modal-lg">').append(
                $('<div class="modal-content">').append(
                    $('<div class="modal-header">').append(
                        $('<h5 class="modal-title">').text('Results for ' + actualServiceName + ':' + actualOperationName)
                    ),
                    $('<div class="modal-body">').append(accordionContainer),
                    $('<div class="modal-footer">').append(
                        $('<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>')
                    )
                )
            )
        );

        // Append modal content to the body of the page
        $('body').append(modalContent);
    }


    // Utility function to escape HTML characters
    function escapeHtml(text) {
        var map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, function(m) { return map[m]; });
    }
    // Hide loader and show confirmation message
    function hideLoaderAndShowConfirmation(response) {
        $('#loader-overlay').hide();
        if (response.error) {
            showConfirmation(response.error, 'error');
        } else {
            showConfirmation('Execution completed successfully.', 'success');
        }
    }

    // Handle execution errors
    function handleExecutionError(xhr, status, error) {
        // Hide loader overlay
        $('#loader-overlay').hide();
        // Show error confirmation message
        showConfirmation('Error executing services: ' + error, 'error');
    }

    // Function to update the counts display
    function updateCountsDisplay(counts) {
        $('#passed-count-value').text(counts.passed);
        $('#failed-at-least-once-count-value').text(counts.failedAtLeastOnce);
        $('#failed-all-count-value').text(counts.failedAll);
    }

    // Function to format XML for display
function formatXml(xml) {
    const formatted = xml.replace(/(>)(<)(\/*)/g, '$1\r\n$2$3'); // Insert newlines
    const pad = 0;
    const lines = formatted.split('\r\n');
    let indent = 0;
    let formattedXml = '';

    lines.forEach(line => {
        let padding = '';

        if (line.match(/.+<\/\w[^>]*>$/)) {
            // Element with both opening and closing tag on same line
            padding = ' '.repeat(indent);
        } else if (line.match(/^<\/\w/)) {
            // Closing tag
            indent -= 4;
            padding = ' '.repeat(indent);
        } else if (line.match(/^<\w[^>]*[^\/]>.*$/)) {
            // Opening tag
            padding = ' '.repeat(indent);
            indent += 4;
        } else {
            padding = ' '.repeat(indent);
        }

        formattedXml += padding + line + '\r\n';
    });

    return formattedXml.trim();
}

});
